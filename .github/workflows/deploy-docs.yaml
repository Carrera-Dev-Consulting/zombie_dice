name: Test and Deploy Docs

# build the documentation whenever there are new commits on main
on:
  push:
    branches:
      - main

# security: restrict permissions for CI jobs.
permissions:
  contents: read

jobs:
  # Build the documentation and upload the static HTML files as an artifact.
  build:
    runs-on: ubuntu-latest
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # ADJUST THIS: install all dependencies (including pdoc)
      - run: pip install .
      - run: pip install -r requirements-dev.txt
      - run: make build-docs
      - uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

      # Code Coverage Comment
      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          # If you use a different name, update COMMENT_ARTIFACT_NAME accordingly
          name: python-coverage-comment-action
          # If you use a different name, update COMMENT_FILENAME accordingly
          path: python-coverage-comment-action.txt

  # Deploy the artifact to GitHub pages.
  # This is a separate job so that only actions/deploy-pages has the necessary permissions.
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
  release:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1
      - uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: true
          prerelease: true
          generateReleaseNotes: true
          tag: ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
      
      - name: "✏️ Generate release changelog"
        id: changelog
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        with:
          exclude-tags: '^(\d+.){2}\d+-main.+$'
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: peter-evans/create-pull-request@v7
        with:
          commit-message: Saving Automatic Release Notes.
          draft: true
          labels: automated,docs
          branch: ${{ steps.version.outputs.version }}-release-notes
          title: 'chore(changelog): Updating Changelog for version ${{ steps.version.outputs.version }}'
          
